version: "3.8"

networks:
  default:
    driver: bridge

services:
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus-config.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  promtail:
    image: grafana/promtail
    volumes:
      - ./promtail-config.yml:/etc/promtail/config.yaml
      - /var/log/fastapi:/var/log/fastapi
    command: -config.file=/etc/promtail/config.yaml

  grafana:
    image: grafana/grafana-oss
    ports:
      - "3000:3000"

  loki:
    image: grafana/loki
    ports:
      - "3100:3100"
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"      # RabbitMQ protocol
      - "15672:15672"    # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - default
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 5s
      retries: 10

  qdrant:
    image: qdrant/qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ./qdrant_storage:/qdrant/storage:z
    networks:
      - default

  main-service:
    build:
      context: ./main-service
      dockerfile: Dockerfile
    container_name: main-service
    ports:
      - "8000:8000"
    depends_on:
      rabbitmq:
          condition: service_healthy
      qdrant:
          condition: service_started
    networks:
      - default
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 5

  insertion-service:
    build:
      context: ./insertion-service
      dockerfile: Dockerfile
    container_name: insertion-service
    depends_on:
      rabbitmq:
        condition: service_healthy
      qdrant:
        condition: service_started
    networks:
      - default

  storage-service:
    build:
      context: ./storage-service
      dockerfile: Dockerfile
    container_name: storage-service
    ports:
      - "8001:8001"
    depends_on:
      rabbitmq:
          condition: service_healthy
      qdrant:
          condition: service_started
    networks:
      - default
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 5

  sync-consumer-service:
    build: 
      context: ./sync-consumer-service
      dockerfile: dockerfile
    container_name: sync-consumer-service

    depends_on:      
      rabbitmq:
          condition: service_healthy
      qdrant:
          condition: service_started
  
  jaeger:
    image: jaegertracing/all-in-one:latest # Use a specific version in production e.g., 1.58
    container_name: jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver (we are using this one)
      # - "6831:6831/udp" # Jaeger Thrift Compact Protocol (Agent) - Optional
      # - "14268:14268" # Jaeger Thrift HTTP Protocol (Collector) - Optional
      # - "5778:5778"   # Jaeger Thrift Binary Protocol (Collector) - Optional
    environment:
      # Enable OTLP receivers (usually enabled by default in recent versions)
      - COLLECTOR_OTLP_ENABLED=true
      # Optional: Set default sampling strategy if needed
      # - JAEGER_SAMPLING_TYPE=const
      # - JAEGER_SAMPLING_PARAM=1 # Sample every trace (for demo purposes)
    networks:
      - default

  gateway-service:
    build: ./gateway-service
    container_name: gateway-service
    ports:
      - "8002:8002"
    environment:      
      - OTEL_SERVICE_NAME=gateway-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318/v1/traces
      - MAIN_SERVICE_URL=http://main-service:8000
    depends_on:
      - jaeger
      - main-service
    networks:
      - default

volumes:
  rabbitmq_data:

